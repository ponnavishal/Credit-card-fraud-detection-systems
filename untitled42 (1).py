# -*- coding: utf-8 -*-
"""Untitled42.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1arHL45jwseXxN3159sVKQkhl0JzydPZU

Importing required libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#importing the dataset
data=pd.read_csv("/content/creditcard.csv")
data

data.info()

data.describe()

#first 5 rows
data.head()

#last 5 rows
data.tail()

data.isnull().sum()

data.shape

data.size

# distribution of legit transactions & fraudulent transactions
data['Class'].value_counts()

# separating the data for analysis
legit=data[data.Class==0]
fraud=data[data.Class==1]

print(legit.shape)
fraud.shape

# statistical measures of the data
legit.Amount.describe()

fraud.Amount.describe()

# compare the values for both transactions
data.groupby('Class').mean()

"""Under-Sampling

Build a sample dataset containing similar distribution of normal transactions and Fraudulent Transactions
"""

legit_sample=legit.sample(n=492)
legit_sample

"""Concatenating two DataFrames"""

new_data=pd.concat([legit_sample,fraud],axis=0)

new_data.head()

new_data.tail()

new_data['Class'].value_counts()

new_data.groupby('Class').mean()

x=new_data.drop(columns='Class',axis=1)
y=new_data['Class']

x

y

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=3)

print(x.shape,x_train.shape,x_test.shape)

model=LogisticRegression()

# training the Logistic Regression Model with Training Data
model.fit(x_train,y_train)

trainig_data=model.predict(x_train)
trainig_data

testing_data=model.predict(x_test)
testing_data

"""Accuracy on trainig data

"""

trainind_data_accuracy=accuracy_score(trainig_data,y_train)
print("Acuuracy of training data is :",trainind_data_accuracy)

# accuracy on test data
testing_data_accuracy=accuracy_score(testing_data,y_test)
print("accuray of testing data:",testing_data_accuracy)

import warnings
warnings.filterwarnings("ignore")

!pip install streamlit
import streamlit as st

st.title("Credit Card Fraud Detection Model")
st.write("Enter the following features to check if the transaction is legitimate or fraudulent:")

# Create input fields for user to enter feature values
input_df = st.text_input('Input All features (comma separated)', '')

if input_df:
    # Split the input into a list of features
    input_df_lst = input_df.split(',')

    # Convert input features to a numpy array of floats
    features = np.array(input_df_lst, dtype=np.float64)
    # Scale the input features (apply the same scaling as for the training data)
    features_scaled = scaler.transform(features.reshape(1, -1))
    # Make prediction
    prediction = model.predict(features_scaled)
    # Display result
    if prediction[0] == 0:
        st.write("Legitimate transaction")
    else:
        st.write("Fraudulent transaction")



